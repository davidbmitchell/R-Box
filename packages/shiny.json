{
      "objects" : [
            "absolutePanel",
            "actionButton",
            "actionLink",
            "addResourcePath",
            "animationOptions",
            "as.shiny.appobj",
            "basicPage",
            "bootstrapPage",
            "brushedPoints",
            "brushOpts",
            "checkboxGroupInput",
            "checkboxInput",
            "clickOpts",
            "code",
            "column",
            "conditionalPanel",
            "createWebDependency",
            "dataTableOutput",
            "dateInput",
            "dateRangeInput",
            "dblclickOpts",
            "div",
            "downloadButton",
            "downloadHandler",
            "downloadLink",
            "eventReactive",
            "exprToFunction",
            "fileInput",
            "fixedPage",
            "fixedPanel",
            "fixedRow",
            "flowLayout",
            "fluidPage",
            "fluidRow",
            "getDefaultReactiveDomain",
            "headerPanel",
            "helpText",
            "hoverOpts",
            "HTML",
            "htmlOutput",
            "icon",
            "imageOutput",
            "img",
            "includeCSS",
            "includeHTML",
            "includeMarkdown",
            "includeScript",
            "includeText",
            "incProgress",
            "inputPanel",
            "installExprFunction",
            "invalidateLater",
            "is.reactive",
            "is.reactivevalues",
            "is.shiny.appobj",
            "is.singleton",
            "isolate",
            "knit_print.html",
            "knit_print.shiny.appobj",
            "knit_print.shiny.render.function",
            "knit_print.shiny.tag",
            "knit_print.shiny.tag.list",
            "mainPanel",
            "makeReactiveBinding",
            "markRenderFunction",
            "maskReactiveContext",
            "navbarMenu",
            "navbarPage",
            "navlistPanel",
            "nearPoints",
            "need",
            "numericInput",
            "observe",
            "observeEvent",
            "onReactiveDomainEnded",
            "outputOptions",
            "pageWithSidebar",
            "parseQueryString",
            "passwordInput",
            "plotOutput",
            "plotPNG",
            "pre",
            "Progress",
            "radioButtons",
            "reactive",
            "reactiveFileReader",
            "reactivePlot",
            "reactivePoll",
            "reactivePrint",
            "reactiveTable",
            "reactiveText",
            "reactiveTimer",
            "reactiveUI",
            "reactiveValues",
            "reactiveValuesToList",
            "registerInputHandler",
            "removeInputHandler",
            "renderDataTable",
            "renderImage",
            "renderPlot",
            "renderPrint",
            "renderTable",
            "renderText",
            "renderUI",
            "repeatable",
            "runApp",
            "runExample",
            "runGist",
            "runGitHub",
            "runUrl",
            "selectInput",
            "selectizeInput",
            "serverInfo",
            "setProgress",
            "shinyApp",
            "shinyAppDir",
            "shinyServer",
            "shinyUI",
            "showReactLog",
            "sidebarLayout",
            "sidebarPanel",
            "singleton",
            "sliderInput",
            "span",
            "splitLayout",
            "stopApp",
            "strong",
            "submitButton",
            "tableOutput",
            "tabPanel",
            "tabsetPanel",
            "tag",
            "tagAppendAttributes",
            "tagAppendChild",
            "tagAppendChildren",
            "tagList",
            "tags",
            "tagSetChildren",
            "textInput",
            "textOutput",
            "titlePanel",
            "uiOutput",
            "updateCheckboxGroupInput",
            "updateCheckboxInput",
            "updateDateInput",
            "updateDateRangeInput",
            "updateNavbarPage",
            "updateNavlistPanel",
            "updateNumericInput",
            "updateRadioButtons",
            "updateSelectInput",
            "updateSelectizeInput",
            "updateSliderInput",
            "updateTabsetPanel",
            "updateTextInput",
            "validate",
            "validateCssUnit",
            "verbatimTextOutput",
            "verticalLayout",
            "wellPanel",
            "withMathJax",
            "withProgress",
            "withReactiveDomain",
            "withTags"
      ],
      "methods" : {
            "absolutePanel" : "absolutePanel(..., top = NULL, left = NULL, right = NULL, bottom = NULL, width = NULL, height = NULL, draggable = FALSE, fixed = FALSE, cursor = c(\"auto\", \"move\", \"default\", \"inherit\")) ",
            "actionButton" : "actionButton(inputId, label, icon = NULL, width = NULL, ...) ",
            "actionLink" : "actionLink(inputId, label, icon = NULL, ...) ",
            "addResourcePath" : "addResourcePath(prefix, directoryPath) ",
            "animationOptions" : "animationOptions(interval = 1000, loop = FALSE, playButton = NULL, pauseButton = NULL) ",
            "as.shiny.appobj" : "as.shiny.appobj(x) ",
            "basicPage" : "basicPage(...) ",
            "bootstrapPage" : "bootstrapPage(..., title = NULL, responsive = NULL, theme = NULL) ",
            "brushedPoints" : "brushedPoints(df, brush, xvar = NULL, yvar = NULL, panelvar1 = NULL, panelvar2 = NULL, allRows = FALSE) ",
            "brushOpts" : "brushOpts(id = NULL, fill = \"#9cf\", stroke = \"#036\", opacity = 0.25, delay = 300, delayType = c(\"debounce\", \"throttle\"), clip = TRUE, direction = c(\"xy\", \"x\", \"y\"), resetOnNew = FALSE) ",
            "checkboxGroupInput" : "checkboxGroupInput(inputId, label, choices, selected = NULL, inline = FALSE, width = NULL) ",
            "checkboxInput" : "checkboxInput(inputId, label, value = FALSE, width = NULL) ",
            "clickOpts" : "clickOpts(id = NULL, clip = TRUE) ",
            "code" : "code(...) ",
            "column" : "column(width, ..., offset = 0) ",
            "conditionalPanel" : "conditionalPanel(condition, ...) ",
            "createWebDependency" : "createWebDependency(dependency) ",
            "dataTableOutput" : "dataTableOutput(outputId) ",
            "dateInput" : "dateInput(inputId, label, value = NULL, min = NULL, max = NULL, format = \"yyyy-mm-dd\", startview = \"month\", weekstart = 0, language = \"en\", width = NULL) ",
            "dateRangeInput" : "dateRangeInput(inputId, label, start = NULL, end = NULL, min = NULL, max = NULL, format = \"yyyy-mm-dd\", startview = \"month\", weekstart = 0, language = \"en\", separator = \" to \", width = NULL) ",
            "dblclickOpts" : "dblclickOpts(id = NULL, clip = TRUE, delay = 400) ",
            "div" : "div(...) ",
            "downloadButton" : "downloadButton(outputId, label = \"Download\", class = NULL) ",
            "downloadHandler" : "downloadHandler(filename, content, contentType = NA) ",
            "downloadLink" : "downloadLink(outputId, label = \"Download\", class = NULL) ",
            "eventReactive" : "eventReactive(eventExpr, valueExpr, event.env = parent.frame(), event.quoted = FALSE, value.env = parent.frame(), value.quoted = FALSE, label = NULL, domain = getDefaultReactiveDomain(), ignoreNULL = TRUE) ",
            "exprToFunction" : "exprToFunction(expr, env = parent.frame(2), quoted = FALSE, caller_offset = 1) ",
            "fileInput" : "fileInput(inputId, label, multiple = FALSE, accept = NULL, width = NULL) ",
            "fixedPage" : "fixedPage(..., title = NULL, responsive = NULL, theme = NULL) ",
            "fixedPanel" : "fixedPanel(..., top = NULL, left = NULL, right = NULL, bottom = NULL, width = NULL, height = NULL, draggable = FALSE, cursor = c(\"auto\",     \"move\", \"default\", \"inherit\")) ",
            "fixedRow" : "fixedRow(...) ",
            "flowLayout" : "flowLayout(..., cellArgs = list()) ",
            "fluidPage" : "fluidPage(..., title = NULL, responsive = NULL, theme = NULL) ",
            "fluidRow" : "fluidRow(...) ",
            "getDefaultReactiveDomain" : "getDefaultReactiveDomain() ",
            "headerPanel" : "headerPanel(title, windowTitle = title) ",
            "helpText" : "helpText(...) ",
            "hoverOpts" : "hoverOpts(id = NULL, delay = 300, delayType = c(\"debounce\", \"throttle\"), clip = TRUE, nullOutside = TRUE) ",
            "HTML" : "HTML(text, ...) ",
            "htmlOutput" : "htmlOutput(outputId, inline = FALSE, container = if (inline) span else div, ...) ",
            "icon" : "icon(name, class = NULL, lib = \"font-awesome\") ",
            "imageOutput" : "imageOutput(outputId, width = \"100%\", height = \"400px\", click = NULL, dblclick = NULL, hover = NULL, hoverDelay = NULL, hoverDelayType = NULL, brush = NULL, clickId = NULL, hoverId = NULL, inline = FALSE) ",
            "img" : "img(...) ",
            "includeCSS" : "includeCSS(path, ...) ",
            "includeHTML" : "includeHTML(path) ",
            "includeMarkdown" : "includeMarkdown(path) ",
            "includeScript" : "includeScript(path, ...) ",
            "includeText" : "includeText(path) ",
            "incProgress" : "incProgress(amount = 0.1, message = NULL, detail = NULL, session = getDefaultReactiveDomain()) ",
            "inputPanel" : "inputPanel(...) ",
            "installExprFunction" : "installExprFunction(expr, name, eval.env = parent.frame(2), quoted = FALSE, assign.env = parent.frame(1), label = as.character(sys.call(-1)[[1]])) ",
            "invalidateLater" : "invalidateLater(millis, session) ",
            "is.reactive" : "is.reactive(x) ",
            "is.reactivevalues" : "is.reactivevalues(x) ",
            "is.shiny.appobj" : "is.shiny.appobj(x) ",
            "is.singleton" : "is.singleton(x) ",
            "isolate" : "isolate(expr) ",
            "knit_print.html" : "knit_print.html(x, ...) ",
            "knit_print.shiny.appobj" : "knit_print.shiny.appobj(x, ...) ",
            "knit_print.shiny.render.function" : "knit_print.shiny.render.function(x, ..., inline = FALSE) ",
            "knit_print.shiny.tag" : "knit_print.shiny.tag(x, ...) ",
            "knit_print.shiny.tag.list" : "knit_print.shiny.tag.list(x, ...) ",
            "mainPanel" : "mainPanel(..., width = 8) ",
            "makeReactiveBinding" : "makeReactiveBinding(symbol, env = parent.frame()) ",
            "markRenderFunction" : "markRenderFunction(uiFunc, renderFunc) ",
            "maskReactiveContext" : "maskReactiveContext(expr) ",
            "navbarMenu" : "navbarMenu(title, ..., icon = NULL) ",
            "navbarPage" : "navbarPage(title, ..., id = NULL, position = c(\"static-top\", \"fixed-top\", \"fixed-bottom\"), header = NULL, footer = NULL, inverse = FALSE, collapsible = FALSE, collapsable, fluid = TRUE, responsive = NULL, theme = NULL, windowTitle = title) ",
            "navlistPanel" : "navlistPanel(..., id = NULL, selected = NULL, well = TRUE, fluid = TRUE, widths = c(4, 8)) ",
            "nearPoints" : "nearPoints(df, coordinfo, xvar = NULL, yvar = NULL, panelvar1 = NULL, panelvar2 = NULL, threshold = 5, maxpoints = NULL, addDist = FALSE, allRows = FALSE) ",
            "need" : "need(expr, message = paste(label, \"must be provided\"), label) ",
            "numericInput" : "numericInput(inputId, label, value, min = NA, max = NA, step = NA, width = NULL) ",
            "observe" : "observe(x, env = parent.frame(), quoted = FALSE, label = NULL, suspended = FALSE, priority = 0, domain = getDefaultReactiveDomain(), autoDestroy = TRUE) ",
            "observeEvent" : "observeEvent(eventExpr, handlerExpr, event.env = parent.frame(), event.quoted = FALSE, handler.env = parent.frame(), handler.quoted = FALSE, label = NULL, suspended = FALSE, priority = 0, domain = getDefaultReactiveDomain(), autoDestroy = TRUE, ignoreNULL = TRUE) ",
            "onReactiveDomainEnded" : "onReactiveDomainEnded(domain, callback, failIfNull = FALSE) ",
            "outputOptions" : "outputOptions(x, name, ...) ",
            "pageWithSidebar" : "pageWithSidebar(headerPanel, sidebarPanel, mainPanel) ",
            "parseQueryString" : "parseQueryString(str, nested = FALSE) ",
            "passwordInput" : "passwordInput(inputId, label, value = \"\", width = NULL) ",
            "plotOutput" : "plotOutput(outputId, width = \"100%\", height = \"400px\", click = NULL, dblclick = NULL, hover = NULL, hoverDelay = NULL, hoverDelayType = NULL, brush = NULL, clickId = NULL, hoverId = NULL, inline = FALSE) ",
            "plotPNG" : "plotPNG(func, filename = tempfile(fileext = \".png\"), width = 400, height = 400, res = 72, ...) ",
            "pre" : "pre(...) ",
            "radioButtons" : "radioButtons(inputId, label, choices, selected = NULL, inline = FALSE, width = NULL) ",
            "reactive" : "reactive(x, env = parent.frame(), quoted = FALSE, label = NULL, domain = getDefaultReactiveDomain()) ",
            "reactiveFileReader" : "reactiveFileReader(intervalMillis, session, filePath, readFunc, ...) ",
            "reactivePlot" : "reactivePlot(func, width = \"auto\", height = \"auto\", ...) ",
            "reactivePoll" : "reactivePoll(intervalMillis, session, checkFunc, valueFunc) ",
            "reactivePrint" : "reactivePrint(func) ",
            "reactiveTable" : "reactiveTable(func, ...) ",
            "reactiveText" : "reactiveText(func) ",
            "reactiveTimer" : "reactiveTimer(intervalMs = 1000, session) ",
            "reactiveUI" : "reactiveUI(func) ",
            "reactiveValues" : "reactiveValues(...) ",
            "reactiveValuesToList" : "reactiveValuesToList(x, all.names = FALSE) ",
            "registerInputHandler" : "registerInputHandler(type, fun, force = FALSE) ",
            "removeInputHandler" : "removeInputHandler(type) ",
            "renderDataTable" : "renderDataTable(expr, options = NULL, searchDelay = 500, callback = \"function(oTable) {}\", escape = TRUE, env = parent.frame(), quoted = FALSE) ",
            "renderImage" : "renderImage(expr, env = parent.frame(), quoted = FALSE, deleteFile = TRUE) ",
            "renderPlot" : "renderPlot(expr, width = \"auto\", height = \"auto\", res = 72, ..., env = parent.frame(), quoted = FALSE, func = NULL) ",
            "renderPrint" : "renderPrint(expr, env = parent.frame(), quoted = FALSE, func = NULL, width = getOption(\"width\")) ",
            "renderTable" : "renderTable(expr, ..., env = parent.frame(), quoted = FALSE, func = NULL) ",
            "renderText" : "renderText(expr, env = parent.frame(), quoted = FALSE, func = NULL) ",
            "renderUI" : "renderUI(expr, env = parent.frame(), quoted = FALSE, func = NULL) ",
            "repeatable" : "repeatable(rngfunc, seed = stats::runif(1, 0, .Machine$integer.max)) ",
            "runApp" : "runApp(appDir = getwd(), port = getOption(\"shiny.port\"), launch.browser = getOption(\"shiny.launch.browser\", interactive()), host = getOption(\"shiny.host\", \"127.0.0.1\"), workerId = \"\", quiet = FALSE, display.mode = c(\"auto\", \"normal\",     \"showcase\")) ",
            "runExample" : "runExample(example = NA, port = NULL, launch.browser = getOption(\"shiny.launch.browser\", interactive()), host = getOption(\"shiny.host\", \"127.0.0.1\"), display.mode = c(\"auto\", \"normal\", \"showcase\")) ",
            "runGist" : "runGist(gist, destdir = NULL, ...) ",
            "runGitHub" : "runGitHub(repo, username = getOption(\"github.user\"), ref = \"master\", subdir = NULL, destdir = NULL, ...) ",
            "runUrl" : "runUrl(url, filetype = NULL, subdir = NULL, destdir = NULL, ...) ",
            "selectInput" : "selectInput(inputId, label, choices, selected = NULL, multiple = FALSE, selectize = TRUE, width = NULL, size = NULL) ",
            "selectizeInput" : "selectizeInput(inputId, ..., options = NULL, width = NULL) ",
            "serverInfo" : "serverInfo() ",
            "setProgress" : "setProgress(value = NULL, message = NULL, detail = NULL, session = getDefaultReactiveDomain()) ",
            "shinyApp" : "shinyApp(ui = NULL, server = NULL, onStart = NULL, options = list(), uiPattern = \"/\") ",
            "shinyAppDir" : "shinyAppDir(appDir, options = list()) ",
            "shinyServer" : "shinyServer(func) ",
            "shinyUI" : "shinyUI(ui) ",
            "showReactLog" : "showReactLog() ",
            "sidebarLayout" : "sidebarLayout(sidebarPanel, mainPanel, position = c(\"left\", \"right\"), fluid = TRUE) ",
            "sidebarPanel" : "sidebarPanel(..., width = 4) ",
            "singleton" : "singleton(x, value = TRUE) ",
            "sliderInput" : "sliderInput(inputId, label, min, max, value, step = NULL, round = FALSE, format = NULL, locale = NULL, ticks = TRUE, animate = FALSE, width = NULL, sep = \",\", pre = NULL, post = NULL, timeFormat = NULL, timezone = NULL, dragRange = TRUE) ",
            "span" : "span(...) ",
            "splitLayout" : "splitLayout(..., cellWidths = NULL, cellArgs = list()) ",
            "stopApp" : "stopApp(returnValue = NULL) ",
            "strong" : "strong(...) ",
            "submitButton" : "submitButton(text = \"Apply Changes\", icon = NULL, width = NULL) ",
            "tableOutput" : "tableOutput(outputId) ",
            "tabPanel" : "tabPanel(title, ..., value = title, icon = NULL) ",
            "tabsetPanel" : "tabsetPanel(..., id = NULL, selected = NULL, type = c(\"tabs\", \"pills\"), position = c(\"above\", \"below\", \"left\", \"right\")) ",
            "tag" : "tag(`_tag_name`, varArgs) ",
            "tagAppendAttributes" : "tagAppendAttributes(tag, ...) ",
            "tagAppendChild" : "tagAppendChild(tag, child) ",
            "tagAppendChildren" : "tagAppendChildren(tag, ..., list = NULL) ",
            "tagList" : "tagList(...) ",
            "tagSetChildren" : "tagSetChildren(tag, ..., list = NULL) ",
            "textInput" : "textInput(inputId, label, value = \"\", width = NULL) ",
            "textOutput" : "textOutput(outputId, container = if (inline) span else div, inline = FALSE) ",
            "titlePanel" : "titlePanel(title, windowTitle = title) ",
            "uiOutput" : "uiOutput(outputId, inline = FALSE, container = if (inline) span else div, ...) ",
            "updateCheckboxGroupInput" : "updateCheckboxGroupInput(session, inputId, label = NULL, choices = NULL, selected = NULL, inline = FALSE) ",
            "updateCheckboxInput" : "updateCheckboxInput(session, inputId, label = NULL, value = NULL) ",
            "updateDateInput" : "updateDateInput(session, inputId, label = NULL, value = NULL, min = NULL, max = NULL) ",
            "updateDateRangeInput" : "updateDateRangeInput(session, inputId, label = NULL, start = NULL, end = NULL, min = NULL, max = NULL) ",
            "updateNavbarPage" : "updateNavbarPage(session, inputId, selected = NULL) ",
            "updateNavlistPanel" : "updateNavlistPanel(session, inputId, selected = NULL) ",
            "updateNumericInput" : "updateNumericInput(session, inputId, label = NULL, value = NULL, min = NULL, max = NULL, step = NULL) ",
            "updateRadioButtons" : "updateRadioButtons(session, inputId, label = NULL, choices = NULL, selected = NULL, inline = FALSE) ",
            "updateSelectInput" : "updateSelectInput(session, inputId, label = NULL, choices = NULL, selected = NULL) ",
            "updateSelectizeInput" : "updateSelectizeInput(session, inputId, label = NULL, choices = NULL, selected = NULL, options = list(), server = FALSE) ",
            "updateSliderInput" : "updateSliderInput(session, inputId, label = NULL, value = NULL, min = NULL, max = NULL, step = NULL) ",
            "updateTabsetPanel" : "updateTabsetPanel(session, inputId, selected = NULL) ",
            "updateTextInput" : "updateTextInput(session, inputId, label = NULL, value = NULL) ",
            "validate" : "validate(..., errorClass = character(0)) ",
            "validateCssUnit" : "validateCssUnit(x) ",
            "verbatimTextOutput" : "verbatimTextOutput(outputId) ",
            "verticalLayout" : "verticalLayout(..., fluid = TRUE) ",
            "wellPanel" : "wellPanel(...) ",
            "withMathJax" : "withMathJax(...) ",
            "withProgress" : "withProgress(expr, min = 0, max = 1, value = min + (max - min) * 0.1, message = NULL, detail = NULL, session = getDefaultReactiveDomain(), env = parent.frame(), quoted = FALSE) ",
            "withReactiveDomain" : "withReactiveDomain(domain, expr) ",
            "withTags" : "withTags(code) "
      }
}